{"version":3,"sources":["../src/grep.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IAKqB;AACnB,WADmB,IACnB,GAA0B;QAAd,gEAAU,kBAAI;;0BADP,MACO;;AACxB,oBAAO,OAAP,CAAe,aAAf,GAA+B,QAAQ,aAAR,IAAyB,KAAzB,CADP;AAExB,oBAAO,OAAP,CAAe,cAAf,GAAgC,QAAQ,cAAR,IAA0B,IAA1B,CAFR;;AAIxB,SAAK,OAAL,GAAe,OAAf,CAJwB;GAA1B;;eADmB;;yBAQd,MAAM,UAA4B;;;UAAlB,iEAAW,qBAAO;;AACrC,aAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,YAAI,QAAQ,EAAR,CADkC;AAEtC,YAAM,SAAS,6BAAc,MAAK,OAAL,CAAvB,CAFgC;;AAItC,YAAM,6BAA2B,4BAAuB,cAAS,QAA3D,CAJgC;AAKtC,wBAAO,GAAP,CAAW,MAAX,yBAA0C,OAA1C,EALsC;AAMtC,YAAM,MAAM,yBAAQ,IAAR,CAAa,KAAb,EAAoB,OAApB,EAA6B,EAAC,OAAO,IAAP,EAAa,QAAQ,IAAR,EAA3C,CAAN,CANgC;;AAQtC,YAAI,MAAJ,CAAW,IAAX,CAAgB,MAAhB,EARsC;;AAUtC,YAAI,MAAJ,CAAW,EAAX,CAAc,MAAd,EAAsB,gBAAQ;AAC5B,0BAAO,GAAP,CAAW,kBAAX,EAA+B,EAA/B,EAAmC,IAAnC,EAD4B;SAAR,CAAtB,CAVsC;;AActC,YAAI,MAAJ,CAAW,EAAX,CAAc,MAAd,EAAsB,gBAAQ;AAC5B,0BAAO,GAAP,CAAW,kBAAX,EAA+B,EAA/B,EAAmC,IAAnC,EAD4B;SAAR,CAAtB,CAdsC;;AAkBtC,eAAO,EAAP,CAAU,MAAV,EAAkB,gBAAQ;AACxB,0BAAO,GAAP,CAAW,kBAAX,EAA+B,OAA/B,EAAwC,IAAxC,EADwB;AAExB,cAAI,KAAK,UAAL,IAAmB,KAAK,KAAL,EAAY;AACjC,iBAAK,QAAL,GAAgB,eAAK,OAAL,CAAa,KAAK,QAAL,CAA7B,CADiC;AAEjC,kBAAM,IAAN,CAAW,IAAX;;AAFiC,WAAnC;SAFgB,CAAlB,CAQG,EARH,CAQM,KARN,EAQa,YAAM;AACf,0BAAO,GAAP,CAAW,iBAAX,EAA8B,OAA9B,EAAuC,KAAvC,EADe;SAAN,CARb,CAWG,EAXH,CAWM,OAXN,EAWe,gBAAQ;AACnB,0BAAO,GAAP,CAAW,mBAAX,EADmB;AAEnB,0BAAO,GAAP,CAAW,mBAAX,EAAgC,MAAhC,EAAwC,IAAxC,EAFmB;AAGnB,kBAAQ,KAAR,EAHmB;SAAR,CAXf,CAgBG,EAhBH,CAgBM,OAhBN,EAgBe,eAAO;AAClB,6CAAiC,GAAjC,EADkB;SAAP,CAhBf,CAlBsC;;AAsCtC,YAAI,EAAJ,CAAO,OAAP,EAAgB,eAAO;AACrB,8CAAkC,GAAlC,EADqB;SAAP,CAAhB,CAtCsC;AAyCtC,YAAI,EAAJ,CAAO,OAAP,EAAgB,gBAAQ;AACtB,0BAAO,GAAP,CAAW,oBAAX;;AADsB,iBAGtB,CAAQ,KAAR,EAHsB;SAAR,CAAhB,CAzCsC;OAArB,CAAnB,CADqC;;;;SARpB","file":"grep.js","sourcesContent":["import path from 'path'\r\nimport nodeCLI from 'shelljs-nodecli'\r\nimport ackmateParser from './ackmate-parser'\r\nimport logger from 'bragi'\r\n\r\nexport default class Grep {\r\n  constructor(options = {}) {\r\n    logger.options.groupsEnabled = options.groupsEnabled || false\r\n    logger.options.groupsDisabled = options.groupsDisabled || true\r\n\r\n    this.options = options\r\n  }\r\n\r\n  find(text, basepath, filename = '*.*') {\r\n    return new Promise((resolve, reject) => {\r\n      let lines = []\r\n      const stream = ackmateParser(this.options)\r\n\r\n      const options = ` --ackmate -G ${filename} -d */* -i \"${text}\" ${basepath}`\r\n      logger.log('Grep', `running command nak`, options)\r\n      const cmd = nodeCLI.exec('nak', options, {async: true, silent: true})\r\n\r\n      cmd.stdout.pipe(stream)\r\n\r\n      cmd.stdout.on('data', data => {\r\n        logger.log('Grep:stdout:data', '', data)\r\n      })\r\n\r\n      cmd.stderr.on('data', data => {\r\n        logger.log('Grep:stderr:data', '', data)\r\n      })\r\n\r\n      stream.on('data', data => {\r\n        logger.log('Grep:parser:data', 'match', data)\r\n        if (data.lineNumber && data.value) {\r\n          data.filename = path.resolve(data.filename)\r\n          lines.push(data)\r\n        // logger.log('Grep parser:data', 'pushed', lines)\r\n        }\r\n      })\r\n        .on('end', () => {\r\n          logger.log('Grep:parser:end', 'lines', lines)\r\n        })\r\n        .on('close', code => {\r\n          logger.log('Grep:parser:close')\r\n          logger.log('Grep:parser:close', 'code', code)\r\n          resolve(lines)\r\n        })\r\n        .on('error', err => {\r\n          reject(`Grep#find parser error ${err}`)\r\n        })\r\n\r\n      cmd.on('error', err => {\r\n        reject(`Grep#find process error ${err}`)\r\n      })\r\n      cmd.on('close', code => {\r\n        logger.log('Grep:process:close')\r\n        // logger.log('Grep process close', 'code', code)\r\n        resolve(lines)\r\n      })\r\n    })\r\n  }\r\n}\r\n"]}
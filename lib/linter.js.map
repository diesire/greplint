{"version":3,"sources":["../src/linter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAQqB;AACnB,WADmB,MACnB,CAAY,QAAZ,EAAoC;QAAd,gEAAU,kBAAI;;0BADjB,QACiB;;AAClC,oBAAO,OAAP,CAAe,aAAf,GAA+B,QAAQ,aAAR,IAAyB,KAAzB,CADG;AAElC,oBAAO,OAAP,CAAe,cAAf,GAAgC,QAAQ,cAAR,IAA0B,IAA1B,CAFE;;AAIlC,SAAK,QAAL,GAAgB,QAAhB,CAJkC;AAKlC,SAAK,OAAL,GAAe,OAAf,CALkC;AAMlC,SAAK,MAAL,GAAc,qBAAW,KAAK,OAAL,CAAzB,CANkC;AAOlC,SAAK,IAAL,GAAY,mBAAS,KAAK,OAAL,CAArB,CAPkC;GAApC;;eADmB;;yBAWd,gBAAgB;;;AACnB,WAAK,cAAL,GAAsB,cAAtB,CADmB;AAEnB,aAAO,KAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,QAAL,CAAjB,CACJ,IADI,CACC;eAAU,MAAK,QAAL,CAAc,CAAC,MAAK,QAAL,CAAD,CAAgB,MAAhB,CAAuB,MAAvB,CAAd;OAAV,CADD,CAEJ,KAFI,CAEE;eAAO,QAAQ,MAAR,wBAAoC,GAApC;OAAP,CAFT,CAFmB;;;;6BAOZ,WAAW;;;AAClB,sBAAO,GAAP,CAAW,QAAX,mBAAoC,SAApC,EADkB;AAElB,aAAO,QAAQ,GAAR,CAAY,UAAU,GAAV,CAAc;eAAY,OAAK,OAAL,CAAa,QAAb;OAAZ,CAA1B,EACJ,IADI,CACC,kBAAU;AACd,YAAM,WAAW,OAAO,MAAP,CAAc,UAAC,CAAD,EAAI,CAAJ,EAAU;AACvC,iBAAO,EAAE,MAAF,CAAS,CAAT,CAAP,CADuC;SAAV,EAE5B,EAFc,CAAX,CADQ;AAId,wBAAO,GAAP,CAAW,QAAX,mBAAsC,QAAtC,EAJc;AAKd,eAAO,QAAP,CALc;OAAV,CADR,CAFkB;;;;;;;;;4BAeZ,UAAU;AAChB,sBAAO,GAAP,CAAW,gBAAX,kBAA2C,QAA3C,EADgB;AAEhB,UAAI,UAAU,QAAV,CAFY;AAGhB,UAAI,WAAW,SAAX,CAHY;AAIhB,UAAI,kBAAJ,CAJgB;AAKhB,UAAI,iBAAiB,KAAK,cAAL,CALL;;AAOhB,UAAI,aAAG,QAAH,CAAY,QAAZ,EAAsB,MAAtB,EAAJ,EAAoC;AAClC,YAAM,QAAQ,eAAK,KAAL,CAAW,QAAX,CAAR,CAD4B;AAElC,kBAAU,MAAM,GAAN,CAFwB;AAGlC,mBAAW,MAAM,IAAN,CAHuB;AAIlC,wBAAO,GAAP,CAAW,gBAAX,mBAJkC;OAApC;;AAOA,sBAAO,GAAP,CAAW,sBAAX,EAAmC,OAAnC,EAA4C,OAA5C,EAAqD,QAArD,EAdgB;;AAgBhB,UAAI,CAAC,cAAD,EAAiB;AACnB,wBAAO,GAAP,CAAW,sBAAX,EAAmC,qBAAnC,EADmB;AAEnB,iBAAS,qBAAW,QAAX,EAAqB,KAAK,OAAL,CAA9B,CAFmB;AAGnB,YAAI,OAAO,IAAP,CAAY,KAAZ,CAAkB,IAAlB,EAAwB;AAC1B,gCAAoB,OAAO,IAAP,CAAY,KAAZ,CAAkB,IAAlB,CAAuB,IAAvB,CAA4B,GAA5B,CAApB,CAD0B;SAA5B;OAHF;;AAQA,UAAI,cAAJ,EAAoB;AAClB,wBAAO,GAAP,CAAW,sBAAX,EAAmC,QAAnC,EAA6C,cAA7C,EAA6D,OAA7D,EAAsE,QAAtE,EADkB;AAElB,eAAO,KAAK,IAAL,CAAU,IAAV,CAAe,cAAf,EAA+B,OAA/B,EAAwC,QAAxC,EACJ,IADI,CACC,iBAAS;AACb,0BAAO,GAAP,CAAW,gBAAX,EAA6B,aAA7B,EAA4C,KAA5C,EADa;AAEb,iBAAO,QAAQ,OAAR,CAAgB,KAAhB,CAAP,CAFa;SAAT,CADD,CAKJ,KALI,CAKE;iBAAO,QAAQ,MAAR,2BAAuC,GAAvC;SAAP,CALT,CAFkB;OAApB;;AAUA,sBAAO,GAAP,CAAW,gBAAX,+BAlCgB;AAmChB,aAAO,QAAQ,OAAR,CAAgB,EAAhB,CAAP,CAnCgB;;;;SAjCC","file":"linter.js","sourcesContent":["import path from 'path'\r\nimport fs from 'fs'\r\nimport logger from 'bragi'\r\n\r\nimport Config from './config'\r\nimport Finder from './finder'\r\nimport Grep from './grep'\r\n\r\nexport default class Linter {\r\n  constructor(pathname, options = {}) {\r\n    logger.options.groupsEnabled = options.groupsEnabled || false\r\n    logger.options.groupsDisabled = options.groupsDisabled || true\r\n\r\n    this.pathname = pathname\r\n    this.options = options\r\n    this.finder = new Finder(this.options)\r\n    this.grep = new Grep(this.options)\r\n  }\r\n\r\n  lint(grepExpression) {\r\n    this.grepExpression = grepExpression\r\n    return this.finder.find(this.pathname)\r\n      .then(values => this.grepDirs([this.pathname].concat(values)))\r\n      .catch(err => Promise.reject(`Linter#lint error ${err}`))\r\n  }\r\n\r\n  grepDirs(pathnames) {\r\n    logger.log('Linter', `grepDirs on ${pathnames}`)\r\n    return Promise.all(pathnames.map(pathname => this.grepDir(pathname)))\r\n      .then(values => {\r\n        const filtered = values.reduce((a, b) => {\r\n          return a.concat(b)\r\n        }, [])\r\n        logger.log('Linter', `matches found`, filtered)\r\n        return filtered\r\n      })\r\n  }\r\n\r\n  /**\r\n  * @return {Object}\r\n  */\r\n  grepDir(pathname) {\r\n    logger.log('Linter:grepDir', `working on ${pathname}`)\r\n    let dirname = pathname\r\n    let basename = undefined\r\n    let config\r\n    let grepExpression = this.grepExpression\r\n\r\n    if (fs.statSync(pathname).isFile()) {\r\n      const parse = path.parse(pathname)\r\n      dirname = parse.dir\r\n      basename = parse.base\r\n      logger.log('Linter:grepDir', `file detected`)\r\n    }\r\n\r\n    logger.log('Linter:grepDir:debug', 'paths', dirname, basename)\r\n\r\n    if (!grepExpression) {\r\n      logger.log('Linter:grepDir:debug', 'looking config file')\r\n      config = new Config(pathname, this.options)\r\n      if (config.data.rules.todo) {\r\n        grepExpression = `${config.data.rules.todo.join('|')}`\r\n      }\r\n    }\r\n\r\n    if (grepExpression) {\r\n      logger.log('Linter:grepDir:debug', 'params', grepExpression, dirname, basename)\r\n      return this.grep.find(grepExpression, dirname, basename)\r\n        .then(lines => {\r\n          logger.log('Linter:grepDir', 'found lines', lines)\r\n          return Promise.resolve(lines)\r\n        })\r\n        .catch(err => Promise.reject(`Linter#grepDir error ${err}`))\r\n    }\r\n\r\n    logger.log('warning:Linter', `incorrect grep expression`)\r\n    return Promise.resolve([])\r\n  }\r\n}\r\n"]}
{"version":3,"sources":["../src/config.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,mBAAmB,aAAnB;;IAEe;AACnB,WADmB,MACnB,CAAY,OAAZ,EAAmC;QAAd,gEAAU,kBAAI;;0BADhB,QACgB;;AACjC,qBAAO,KAAP,QAAqB,wDAArB,EAA+B,QAA/B,EACE,qCADF,EADiC;;AAIjC,oBAAO,OAAP,CAAe,aAAf,GAA+B,QAAQ,aAAR,IAAyB,KAAzB,CAJE;AAKjC,oBAAO,OAAP,CAAe,cAAf,GAAgC,QAAQ,cAAR,IAA0B,IAA1B,CALC;;AAOjC,SAAK,OAAL,GAAe,OAAf,CAPiC;AAQjC,SAAK,KAAL,GAAa,EAAb,CARiC;;AAUjC,oBAAO,GAAP,CAAW,QAAX,kCAAmD,KAAK,OAAL,CAAnD,CAViC;GAAnC;;eADmB;;2BAcZ;AACL,UAAM,WAAW,uBAAa,gBAAb,CAAX;;AADD,UAGC,OAAO,SAAS,IAAT,CAAc,KAAK,OAAL,CAArB,CAHD;AAIL,sBAAO,GAAP,CAAW,QAAX,kBAAqC,IAArC,EAJK;;AAML,UAAM,SAAS,OAAO,KAAP,CAAa,IAAb,CAAT,CAND;AAOL,WAAK,KAAL,GAAa,OAAO,KAAP,CAPR;;AASL,aAAO,IAAP,CATK;;;;0BAYM,MAAM;AACjB,UAAM,SAAS;AACb,eAAO,EAAP;OADI,CADW;;AAKjB,UAAI,CAAC,IAAD,EAAO;AACT,eAAO,MAAP,CADS;OAAX;;AAIA,UAAI,MAAM,OAAN,CAAc,KAAK,KAAL,CAAlB,EAA+B;AAC7B,eAAO,KAAP,GAAe,KAAK,KAAL,CADc;OAA/B,MAEO,IAAI,KAAK,KAAL,IAAc,SAAd,IAA2B,QAAO,KAAK,KAAL,CAAP,IAAqB,QAArB,EAA+B;AACnE,eAAO,KAAP,CAAa,IAAb,CAAkB,KAAK,KAAL,CAAlB,CADmE;OAA9D;;;AAXU,aAgBV,MAAP,CAhBiB;;;;SA1BA","file":"config.js","sourcesContent":["import RcFinder from 'rcfinder'\nimport assert from 'assert'\nimport logger from 'bragi'\n\nconst CONFIG_FILE_NAME = '.greplintrc'\n\nexport default class Config {\n  constructor(dirname, options = {}) {\n    assert.equal(typeof (dirname), 'string',\n      \"argument 'dirname' must be a string\")\n\n    logger.options.groupsEnabled = options.groupsEnabled || false\n    logger.options.groupsDisabled = options.groupsDisabled || true\n\n    this.dirname = dirname\n    this.rules = []\n\n    logger.log('Config', `looking for config file on ${this.dirname}`)\n  }\n\n  load() {\n    const rcFinder = new RcFinder(CONFIG_FILE_NAME)\n    // TODO: make it async\n    const data = rcFinder.find(this.dirname)\n    logger.log('Config', `config found`, data)\n\n    const parsed = Config.parse(data)\n    this.rules = parsed.rules\n\n    return this\n  }\n\n  static parse(data) {\n    const result = {\n      rules: []\n    }\n\n    if (!data) {\n      return result\n    }\n\n    if (Array.isArray(data.rules)) {\n      result.rules = data.rules\n    } else if (data.rules != undefined && typeof data.rules == 'object') {\n      result.rules.push(data.rules)\n    }\n    // undefined or null => skip\n\n    return result\n  }\n}\n"]}